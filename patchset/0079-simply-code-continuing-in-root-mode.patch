From 240f0e03dc6e37c08efce034402d684bc9977481 Mon Sep 17 00:00:00 2001
From: Xin Li <fantry@msn.com>
Date: Sun, 21 Jun 2020 17:24:12 -0700
Subject: [PATCH 079/140] simply code continuing in root mode

---
 arch/x86/kvm/vmx/depriv.c | 92 +++++++++++++++++++--------------------
 1 file changed, 46 insertions(+), 46 deletions(-)

diff --git a/arch/x86/kvm/vmx/depriv.c b/arch/x86/kvm/vmx/depriv.c
index bbad4609ad7c..0cf686a66487 100644
--- a/arch/x86/kvm/vmx/depriv.c
+++ b/arch/x86/kvm/vmx/depriv.c
@@ -520,34 +520,6 @@ int vmx_depriv(void);
 void vmx_depriv_rip(void);
 void vmx_depriv_vmcall(void);
 
-#define	DEPRIV_IRET_STACK_RIP							\
-	(*(unsigned long *)(iret_stack_base + DEPRIV_IRET_STACK_GUEST_RIP))
-#define	DEPRIV_IRET_STACK_CS							\
-	(*(unsigned long *)(iret_stack_base + DEPRIV_IRET_STACK_GUEST_CS))
-#define	DEPRIV_IRET_STACK_RFLAGS						\
-	(*(unsigned long *)(iret_stack_base + DEPRIV_IRET_STACK_GUEST_RFLAGS))
-#define	DEPRIV_IRET_STACK_RSP							\
-	(*(unsigned long *)(iret_stack_base + DEPRIV_IRET_STACK_GUEST_RSP))
-#define	DEPRIV_IRET_STACK_SS							\
-	(*(unsigned long *)(iret_stack_base + DEPRIV_IRET_STACK_GUEST_SS))
-#define	DEPRIV_IRET_STACK_CR3							\
-	(*(unsigned long *)(iret_stack_base + DEPRIV_IRET_STACK_GUEST_CR3))
-
-#define DEPRIV_SET_ROOT_MODE_TRAMPOLINE_STACK(ip_off) do {			\
-	DEPRIV_IRET_STACK_RIP		= rip + (ip_off);			\
-	DEPRIV_IRET_STACK_CS		= vmcs_read16(GUEST_CS_SELECTOR);	\
-	DEPRIV_IRET_STACK_RFLAGS	= vmcs_readl(GUEST_RFLAGS);		\
-	DEPRIV_IRET_STACK_RSP		= vmcs_readl(GUEST_RSP);		\
-	DEPRIV_IRET_STACK_SS		= vmcs_read16(GUEST_SS_SELECTOR);	\
-	DEPRIV_IRET_STACK_CR3		= vmcs_readl(GUEST_CR3);		\
-} while (0)
-
-static inline u64 depriv_iret_stack_base(int cpu)
-{
-	return get_cpu_entry_area(cpu)->tss.x86_tss.ist[IST_INDEX_NMI] -
-	       CEA_ESTACK_SIZE(NMI) + 32 * 8;
-}
-
 extern void vmx_validate_guest_state(void);
 
 static void vmx_depriv_cpu(void *info)
@@ -559,8 +531,7 @@ static void vmx_depriv_cpu(void *info)
 	void *host_cpu_state = NULL;
 	void *host_cr3_va = NULL;
 	void *msr_bitmap = NULL;
-	unsigned long iret_stack_base = depriv_iret_stack_base(cpu);
-	unsigned long host_rsp, rip, rsp, rflags;
+	unsigned long rip, rsp, rflags;
 	int vmx_depriv_result;
 
 	if (!(depriv_vmcs_conf.cpu_based_exec_ctrl & CPU_BASED_USE_MSR_BITMAPS)) {
@@ -605,8 +576,7 @@ static void vmx_depriv_cpu(void *info)
 
 	vmcs_writel(HOST_RIP, (unsigned long)vmx_depriv_vmexit);
 	// reserve extra DEPRIV_HOST_STACK_RESERVED_BYTES bytes for reprivileging host
-	host_rsp = (unsigned long)msr_bitmap - DEPRIV_HOST_STACK_RESERVED_BYTES;
-	vmcs_writel(HOST_RSP, host_rsp);
+	vmcs_writel(HOST_RSP, (unsigned long)msr_bitmap - DEPRIV_HOST_STACK_RESERVED_BYTES);
 
 	/* switching to non-root mode */
 	rip = (unsigned long)vmx_depriv_rip;
@@ -623,9 +593,6 @@ static void vmx_depriv_cpu(void *info)
 		     : "=m"(rflags) :: "%rax");
 	vmcs_writel(GUEST_RFLAGS, rflags & ~X86_EFLAGS_IF);
 
-	*(unsigned long *)(host_rsp + DEPRIV_HOST_STACK_IRET_STACK) = iret_stack_base;
-	DEPRIV_SET_ROOT_MODE_TRAMPOLINE_STACK(0);
-
 	pr_debug("depriv: cpu%d deprivileging: rip: %#lx rsp: %#lx\n", cpu, rip, rsp);
 
 	if (test_handle_vmlaunch_failure)
@@ -666,8 +633,6 @@ static void vmx_repriv_cpu_crs(void)
 	unsigned long cr0 = vmcs_readl(GUEST_CR0);
 	unsigned long cr4 = vmcs_readl(GUEST_CR4);
 
-	cpumask_set_cpu(cpu, &depriv_cpu_root_mode_mask);
-
 	if (host_cr0 != cr0) {
 		pr_info("depriv: repriv cpu%d cr0 %#lx : %#lx : %#lx\n",
 			cpu, host_cr0, vmcs_readl(HOST_CR0), cr0);
@@ -832,16 +797,55 @@ void vmx_repriv_cpu(void *info)
 	vmx_repriv_cpu_release_resources();
 }
 
+static inline u64 depriv_iret_stack_base(int cpu)
+{
+	return get_cpu_entry_area(cpu)->tss.x86_tss.ist[IST_INDEX_NMI] -
+	       CEA_ESTACK_SIZE(NMI) + 32 * 8;
+}
+
+#define	DEPRIV_IRET_STACK_RIP							\
+	(*(unsigned long *)(iret_stack_base + DEPRIV_IRET_STACK_GUEST_RIP))
+#define	DEPRIV_IRET_STACK_CS							\
+	(*(unsigned long *)(iret_stack_base + DEPRIV_IRET_STACK_GUEST_CS))
+#define	DEPRIV_IRET_STACK_RFLAGS						\
+	(*(unsigned long *)(iret_stack_base + DEPRIV_IRET_STACK_GUEST_RFLAGS))
+#define	DEPRIV_IRET_STACK_RSP							\
+	(*(unsigned long *)(iret_stack_base + DEPRIV_IRET_STACK_GUEST_RSP))
+#define	DEPRIV_IRET_STACK_SS							\
+	(*(unsigned long *)(iret_stack_base + DEPRIV_IRET_STACK_GUEST_SS))
+#define	DEPRIV_IRET_STACK_CR3							\
+	(*(unsigned long *)(iret_stack_base + DEPRIV_IRET_STACK_GUEST_CR3))
+
+#define DEPRIV_SET_ROOT_MODE_TRAMPOLINE_STACK do {				\
+	DEPRIV_IRET_STACK_RIP		= vmcs_readl(GUEST_RIP);		\
+	DEPRIV_IRET_STACK_CS		= vmcs_read16(GUEST_CS_SELECTOR);	\
+	DEPRIV_IRET_STACK_RFLAGS	= vmcs_readl(GUEST_RFLAGS);		\
+	DEPRIV_IRET_STACK_RSP		= vmcs_readl(GUEST_RSP);		\
+	DEPRIV_IRET_STACK_SS		= vmcs_read16(GUEST_SS_SELECTOR);	\
+	DEPRIV_IRET_STACK_CR3		= vmcs_readl(GUEST_CR3);		\
+} while (0)
+
 /*
  * sync guest state to host w/o changing guest state
  */
 void vmx_repriv_cpu_state(void)
 {
+	int cpu = raw_smp_processor_id();
+	unsigned long iret_stack_base = depriv_iret_stack_base(cpu);
+	unsigned long host_rsp = vmcs_readl(HOST_RSP);
+
 	vmx_repriv_cpu_crs();
 	vmx_repriv_cpu_misc();
 	vmx_repriv_cpu_sysenter_msrs();
 	vmx_repriv_cpu_desc_tables();
 
+	cpumask_set_cpu(cpu, &depriv_cpu_root_mode_mask);
+
+	DEPRIV_SET_ROOT_MODE_TRAMPOLINE_STACK;
+
+	pr_info("depriv: cpu%d iret stack base %#lx\n", cpu, iret_stack_base);
+	*(unsigned long *)(host_rsp + DEPRIV_HOST_STACK_IRET_STACK) = iret_stack_base;
+
 	/*
 	 * last step: overwrite GS base MSR with guest GS base
 	 */
@@ -849,14 +853,12 @@ void vmx_repriv_cpu_state(void)
 }
 
 #define DEPRIV_CONTINUE_IN_NON_ROOT_MODE(ins_len) do {				\
-	DEPRIV_SET_ROOT_MODE_TRAMPOLINE_STACK(ins_len);				\
 	vmcs_writel(GUEST_RIP, rip + ins_len);					\
 	cpumask_clear_cpu(cpu, &depriv_cpu_root_mode_mask);			\
 	return true;								\
 } while (0)
 
-#define DEPRIV_CONTINUE_IN_ROOT_MODE(ins_len) do {				\
-	DEPRIV_SET_ROOT_MODE_TRAMPOLINE_STACK(ins_len);				\
+#define DEPRIV_CONTINUE_IN_ROOT_MODE do {					\
 	return false;								\
 } while (0)
 
@@ -871,7 +873,6 @@ bool vmx_depriv_vmexit_handler(unsigned long *regs)
 	unsigned long rip = vmcs_readl(GUEST_RIP);
 	unsigned long rsp = vmcs_readl(GUEST_RSP);
 	int cpu = raw_smp_processor_id();
-	unsigned long iret_stack_base = depriv_iret_stack_base(cpu);
 	u32 reason = vmcs_read32(VM_EXIT_REASON), insn_len = 0;
 	char insn[64];
 
@@ -879,8 +880,6 @@ bool vmx_depriv_vmexit_handler(unsigned long *regs)
 
 	regs[VCPU_REGS_RSP] = rsp;
 
-	*(unsigned long *)(host_rsp + DEPRIV_HOST_STACK_IRET_STACK) = iret_stack_base;
-
 	(*cnt)++;
 	counter = *cnt;
 
@@ -893,7 +892,7 @@ bool vmx_depriv_vmexit_handler(unsigned long *regs)
 			regs[VCPU_REGS_RAX] = 2;
 
 		vmx_validate_guest_state();
-		DEPRIV_CONTINUE_IN_ROOT_MODE(0);
+		DEPRIV_CONTINUE_IN_ROOT_MODE;
 	}
 
 	if (!(counter % log_mod))
@@ -931,7 +930,8 @@ bool vmx_depriv_vmexit_handler(unsigned long *regs)
 		if (*to_root_mode) {
 			pr_info("depriv: cpu%d (%ld) vmcall @ %#lx, continue in root mode\n",
 				cpu, counter, rip);
-			DEPRIV_CONTINUE_IN_ROOT_MODE(insn_len);
+			vmcs_writel(GUEST_RIP, rip + insn_len);
+			DEPRIV_CONTINUE_IN_ROOT_MODE;
 		} else {
 			pr_debug("depriv: cpu%d (%ld) vmcall @ %#lx\n", cpu, counter, rip);
 			DEPRIV_CONTINUE_IN_NON_ROOT_MODE(insn_len);
@@ -949,7 +949,7 @@ bool vmx_depriv_vmexit_handler(unsigned long *regs)
 		dump_guest_insn(rip, vmcs_read32(VM_EXIT_INSTRUCTION_LEN), insn);
 		pr_info("depriv: cpu%d (%ld) exit reason: %d rip: %#lx rsp: %#lx insn: %s\n",
 			cpu, counter, reason, rip, rsp, insn);
-		DEPRIV_CONTINUE_IN_ROOT_MODE(0);
+		DEPRIV_CONTINUE_IN_ROOT_MODE;
 	}
 }
 
-- 
2.34.1

