From 30704c883c0f4b384701fd82f93ecd19f1c0c94d Mon Sep 17 00:00:00 2001
From: Xin Li <fantry@msn.com>
Date: Wed, 2 Sep 2020 23:01:58 -0700
Subject: [PATCH 104/140] cleanup a bit

---
 arch/x86/kernel/cpu/common.c |  1 -
 arch/x86/kvm/vmx/depriv.c    | 13 ++++++++-----
 2 files changed, 8 insertions(+), 6 deletions(-)

diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index 5c3d63e17e46..514aaa3c82b5 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -1807,7 +1807,6 @@ struct depriv_ops depriv_ops = {
 	.exit = NULL,
 };
 EXPORT_SYMBOL_GPL(depriv_ops);
-#endif
 
 /* May not be marked __init: used by software suspend */
 void syscall_init(void)
diff --git a/arch/x86/kvm/vmx/depriv.c b/arch/x86/kvm/vmx/depriv.c
index e53d586d8754..49e2640f1338 100644
--- a/arch/x86/kvm/vmx/depriv.c
+++ b/arch/x86/kvm/vmx/depriv.c
@@ -537,7 +537,7 @@ void vmx_depriv_rip(void);
 
 void vmx_validate_guest_state(void);
 
-static atomic_t depriv_enter_count;
+static atomic64_t depriv_enter_count;
 
 /*
  * WARNING: must be called with interrupt disabled!
@@ -546,6 +546,7 @@ static bool __vmx_depriv_enter(bool launch)
 {
 	int cpu = raw_smp_processor_id();
 	unsigned long rip, rsp, rflags;
+	long c;
 	int depriv_result;
 
 	rip = (unsigned long)vmx_depriv_rip;
@@ -563,8 +564,9 @@ static bool __vmx_depriv_enter(bool launch)
 		     : "=m"(rflags) :: "%rax");
 	vmcs_writel(GUEST_RFLAGS, rflags);
 
-	if (!(atomic_inc_return(&depriv_enter_count) % log_mod))
-		pr_info("depriv: cpu%d deprivileging: rip: %#lx rsp: %#lx\n", cpu, rip, rsp);
+	c = atomic64_inc_return(&depriv_enter_count);
+	if (!(c % log_mod))
+		pr_info("depriv: cpu%d (%ld) deprivileging: rip: %#lx rsp: %#lx\n", cpu, c, rip, rsp);
 
 	/*
 	 * Should we save/restore general purpose registers around vmx_depriv?
@@ -939,11 +941,12 @@ bool vmx_repriv_cpu_state(void)
 
 	cpumask_set_cpu(cpu, &depriv_cpu_root_mode_mask);
 
-	if (depriv_cleanup)
+	if (depriv_cleanup) {
 		pr_info("depriv: cpu%d switching to root mode GS base %#lx kernel GS base %#lx\n",
 			cpu, read_msr(MSR_GS_BASE), read_msr(MSR_KERNEL_GS_BASE));
+		vmx_repriv_cpu_release_resources();
+	}
 
-	vmx_repriv_cpu_release_resources();
 	return true;
 }
 
-- 
2.34.1

