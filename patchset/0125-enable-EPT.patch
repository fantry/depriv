From 9c84871b14c29299611bc6397d17c1c6a5a7b610 Mon Sep 17 00:00:00 2001
From: Xin Li <fantry@msn.com>
Date: Thu, 8 Oct 2020 18:09:37 -0700
Subject: [PATCH 125/140] enable EPT

---
 arch/x86/depriv/vmx/depriv.c | 11 ++---
 arch/x86/depriv/vmx/vmx.c    | 89 +++++++++++++++++++++++++++++++++++-
 arch/x86/depriv/vmx/vmx.h    |  2 +
 3 files changed, 94 insertions(+), 8 deletions(-)

diff --git a/arch/x86/depriv/vmx/depriv.c b/arch/x86/depriv/vmx/depriv.c
index f285dcddf63f..59245d10c605 100644
--- a/arch/x86/depriv/vmx/depriv.c
+++ b/arch/x86/depriv/vmx/depriv.c
@@ -196,21 +196,21 @@ static inline bool init_vmcs(struct pid_namespace *ns)
 	struct vmcs *vmcs;
 	void *host_cpu_state;
 	unsigned long host_rsp;
-	bool r = false;
 
 	vmcs = alloc_vmcs();
 	if (!vmcs) {
 		pr_err("depriv: cpu%d unable to allocate VMCS for namespace %p\n", cpu, ns);
-		goto exit;
+		return false;
 	}
 
-	r = true;
 	vmcs_clear(vmcs);
 	vmcs_load(vmcs);
 	indirect_branch_prediction_barrier();
 	per_cpu(current_vmcs, cpu) = vmcs;
 	ns->depriv_context->cpu_context[cpu] = vmcs;
 	vmcs_write64(VMCS_LINK_POINTER, ~0ull);
+	vmcs_write64(EPT_POINTER, (__pa(vmcs) + PAGE_SIZE) | VMX_EPTP_MT_WB | VMX_EPTP_PWL_4);
+	pr_debug("depriv: cpu%d eptp %#llx for namespace %p\n", cpu, vmcs_read64(EPT_POINTER), ns);
 
 	host_cpu_state = per_cpu(depriv_cpu_state, cpu);
 	vmcs_writel(HOST_CR3, __pa(host_cpu_state + DEPRIV_CPU_STATE_ROOT_PGD));
@@ -227,8 +227,7 @@ static inline bool init_vmcs(struct pid_namespace *ns)
 	*(unsigned long *)(host_rsp + DEPRIV_HOST_STACK_IRET_STACK) =
 		depriv_iret_trampoline_stack(cpu);
 
-exit:
-	return r;
+	return true;
 }
 
 static void vmx_depriv_cpu(void *info)
@@ -442,7 +441,7 @@ bool vmx_depriv_vmexit_handler(unsigned long *regs)
 			break;
 		}
 		break;
-	 }
+	}
 
 	default:
 		if (call_extra_exit_handlers && !vmx_depriv_handle(reason, regs, counter)) {
diff --git a/arch/x86/depriv/vmx/vmx.c b/arch/x86/depriv/vmx/vmx.c
index 5f9a1ac895d1..e33d72c29ade 100644
--- a/arch/x86/depriv/vmx/vmx.c
+++ b/arch/x86/depriv/vmx/vmx.c
@@ -15,6 +15,7 @@
 #include <asm/msr.h>
 #include <asm/perf_event.h>
 #include <asm/tlbflush.h>
+#include <asm/mtrr.h>
 
 #include "vmx.h"
 
@@ -35,19 +36,77 @@ static inline bool cpu_has_load_perf_global_ctrl(void)
 	       (depriv_vmcs_config.vmexit_ctrl & VM_EXIT_LOAD_IA32_PERF_GLOBAL_CTRL);
 }
 
+static inline bool cpu_has_vmx_ept_2m_page(void)
+{
+	return depriv_vmcs_config.vmx_cap_ept & VMX_EPT_2MB_PAGE_BIT;
+}
+
+static inline bool cpu_has_vmx_ept_1g_page(void)
+{
+	return depriv_vmcs_config.vmx_cap_ept & VMX_EPT_1GB_PAGE_BIT;
+}
+
 inline struct vmcs *alloc_vmcs(void)
 {
 	int cpu = raw_smp_processor_id();
 	struct page *pages;
 	struct vmcs *vmcs;
+	void *ept;
+	u64 *epte;
+	int i, nr_ept_pages = (1 << depriv_vmcs_config.order) - 1;
 
 	pages = __alloc_pages_node(cpu_to_node(cpu), GFP_KERNEL, depriv_vmcs_config.order);
 	if (!pages)
 		return NULL;
 
 	vmcs = page_address(pages);
-	memset(vmcs, 0, depriv_vmcs_config.size);
+	memset(vmcs, 0, PAGE_SIZE << depriv_vmcs_config.order);
 	vmcs->hdr.revision_id = depriv_vmcs_config.revision_id;
+
+	if (nr_ept_pages <= 0)
+		goto exit;
+
+	ept = (void *)vmcs + PAGE_SIZE; // ept points to pgd
+
+	/* The first 1T/29G non root mode physical address space address translation */
+	epte = ept; // epte points to pgd
+	ept += PAGE_SIZE; // ept points to pud
+	--nr_ept_pages;
+	epte[0] = __pa(ept) | VMX_EPT_RWX_MASK;
+	pr_debug("depriv: pgd[0]=%#llx\n",  epte[0]);
+	if (cpu_has_vmx_ept_1g_page()) {
+		epte[1] = (__pa(ept) + PAGE_SIZE) | VMX_EPT_RWX_MASK;
+		pr_debug("depriv: pgd[1]=%#llx\n",  epte[1]);
+	}
+
+	epte = ept; // epte points to pud
+	if (cpu_has_vmx_ept_1g_page()) {
+		for (i = 0; i < 512 * nr_ept_pages; i++) {
+			epte[i] = PUD_PAGE_SIZE * i |
+				  (1ull << 7) |
+				  (MTRR_TYPE_WRBACK << VMX_EPT_MT_EPTE_SHIFT) |
+				  VMX_EPT_RWX_MASK;
+			pr_debug("depriv: ept pud[%4d]=%#llx\n", i, epte[i]);
+		}
+	} else if (cpu_has_vmx_ept_2m_page()) {
+		ept += PAGE_SIZE; // ept points to pmd
+		--nr_ept_pages;
+		for (i = 0; i < nr_ept_pages; i++) {
+			epte[i] = (__pa(ept) + PAGE_SIZE * i) | VMX_EPT_RWX_MASK;
+			pr_debug("depriv: ept pud[%2d]=%#llx\n", i, epte[i]);
+		}
+
+		epte = ept; // epte points to pmd
+		for (i = 0; i < 512 * nr_ept_pages; i++) {
+			epte[i] = PMD_PAGE_SIZE * i |
+				  (1ull << 7) |
+				  (MTRR_TYPE_WRBACK << VMX_EPT_MT_EPTE_SHIFT) |
+				  VMX_EPT_RWX_MASK;
+			pr_debug("depriv: ept pmd[%4d]=%#llx\n", i, epte[i]);
+		}
+	}
+
+exit:
 	return vmcs;
 }
 
@@ -96,6 +155,7 @@ int __init setup_vmcs_config(void)
 	if (_cpu_based_exec_control & CPU_BASED_ACTIVATE_SECONDARY_CONTROLS) {
 		min2 = 0;
 		opt2 = SECONDARY_EXEC_RDTSCP |
+		       SECONDARY_EXEC_ENABLE_EPT |
 		       SECONDARY_EXEC_ENABLE_INVPCID |
 		       SECONDARY_EXEC_XSAVES;
 		if (adjust_vmx_controls(min2, opt2,
@@ -140,6 +200,18 @@ int __init setup_vmcs_config(void)
 				&_pin_based_exec_control) < 0)
 		return -EIO;
 
+	if (_cpu_based_2nd_exec_control & SECONDARY_EXEC_ENABLE_EPT) {
+		rdmsr_safe(MSR_IA32_VMX_EPT_VPID_CAP,
+			   &depriv_vmcs_config.vmx_cap_ept, &depriv_vmcs_config.vmx_cap_vpid);
+
+		/* CR3 accesses and invlpg don't need to cause VM Exits when EPT
+		   enabled */
+		_cpu_based_exec_control &= ~(CPU_BASED_CR3_LOAD_EXITING |
+					     CPU_BASED_CR3_STORE_EXITING |
+					     CPU_BASED_INVLPG_EXITING);
+		pr_info("depriv: disabled cr3 load/store exiting\n");
+	}
+
 	if (!(_cpu_based_2nd_exec_control &
 		SECONDARY_EXEC_VIRTUAL_INTR_DELIVERY))
 		_pin_based_exec_control &= ~PIN_BASED_POSTED_INTR;
@@ -169,8 +241,21 @@ int __init setup_vmcs_config(void)
 
 	depriv_vmcs_config.size = vmx_msr_high & 0x1fff;
 	depriv_vmcs_config.order = get_order(depriv_vmcs_config.size);
-	depriv_vmcs_config.basic_cap = vmx_msr_high & ~0x1fff;
 
+	/*
+	 * Should be get_order(depriv_vmcs_config.size), which is always 0 according to
+	 * Intel SDM as of today: IA-32 SDM Vol 3B: VMCS size is never greater than 4kB.
+	 *
+	 * However we need some extra pages for EPTP;
+	 */
+	if (cpu_has_vmx_ept_1g_page())
+		depriv_vmcs_config.order = 2;
+	else if (cpu_has_vmx_ept_2m_page())
+		depriv_vmcs_config.order = 5;
+	else // No super page no EPT
+		_cpu_based_2nd_exec_control &= ~SECONDARY_EXEC_ENABLE_EPT;
+
+	depriv_vmcs_config.basic_cap = vmx_msr_high & ~0x1fff;
 	depriv_vmcs_config.revision_id = vmx_msr_low;
 
 	depriv_vmcs_config.pin_based_exec_ctrl = _pin_based_exec_control;
diff --git a/arch/x86/depriv/vmx/vmx.h b/arch/x86/depriv/vmx/vmx.h
index 3c39db8c532c..8f3efefa0ad6 100644
--- a/arch/x86/depriv/vmx/vmx.h
+++ b/arch/x86/depriv/vmx/vmx.h
@@ -33,6 +33,8 @@ struct vmcs_config {
 	int size;
 	int order;
 	u32 basic_cap;
+	u32 vmx_cap_ept;
+	u32 vmx_cap_vpid;
 	u32 revision_id;
 	u32 pin_based_exec_ctrl;
 	u32 cpu_based_exec_ctrl;
-- 
2.34.1

